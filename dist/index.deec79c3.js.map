{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\r\n\r\n// prettier-ignore\r\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nconst form = document.querySelector('.form');\r\nconst containerWorkouts = document.querySelector('.workouts');\r\nconst inputType = document.querySelector('.form__input--type');\r\nconst inputDistance = document.querySelector('.form__input--distance');\r\nconst inputDuration = document.querySelector('.form__input--duration');\r\nconst inputCadence = document.querySelector('.form__input--cadence');\r\nconst inputElevation = document.querySelector('.form__input--elevation');\r\n\r\n//data class(parent)\r\nclass WorkOut {\r\n  date = new Date();\r\n  id = (Date.now() + '').slice(-10);\r\n\r\n  constructor(coords, distance, duration) {\r\n    this.coords = coords;\r\n    this.distance = distance;\r\n    this.duration = duration;\r\n  }\r\n\r\n  _setDescription() {\r\n    const months = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December',\r\n    ];\r\n\r\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(\r\n      1\r\n    )} on ${this.date.getDate()} ${months[this.date.getMonth()]} `;\r\n  }\r\n}\r\n\r\n//data class (child) for running\r\nclass Running extends WorkOut {\r\n  type = 'running';\r\n  constructor(coords, distance, duration, cadence) {\r\n    super(coords, distance, duration, cadence);\r\n    this.cadence = cadence;\r\n    this.type = 'running';\r\n    this.calcPace();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcPace() {\r\n    this.pace = this.duration / this.distance;\r\n    return this.pace;\r\n  }\r\n}\r\n\r\n//data class (child) for cycling\r\nclass Cycling extends WorkOut {\r\n  type = 'cycling';\r\n  constructor(coords, distance, duration, elevationGain) {\r\n    super(coords, distance, duration, elevationGain);\r\n    this.elevationGain = elevationGain;\r\n    this.type = 'cycling';\r\n    this.calcSpeed();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcSpeed() {\r\n    this.speed = this.distance / (this.duration / 60);\r\n    return this.speed;\r\n  }\r\n}\r\n//testing data\r\n\r\n// const run1 = new Running([48, 21], 5.2, 22, 188);\r\n\r\n// const cyc1 = new Cycling([55, 2], 22, 98, 488);\r\n// console.log(run1, cyc1);\r\n\r\nclass App {\r\n  //local vars\r\n  #map;\r\n  #mapEvent;\r\n  #mapZoomLevel = 13;\r\n  #workouts = [];\r\n\r\n  constructor() {\r\n    this._getPosition();\r\n    this._getLocalStorage();\r\n    form.addEventListener('submit', this._newWorkOut.bind(this));\r\n    inputType.addEventListener('change', this._toggleElevationField);\r\n    containerWorkouts.addEventListener('click', this._moveToMaker.bind(this));\r\n  }\r\n\r\n  //\r\n  _getPosition() {\r\n    if (navigator.geolocation)\r\n      navigator.geolocation.getCurrentPosition(\r\n        this._loadMap.bind(this),\r\n\r\n        function () {\r\n          alert('could not get your position');\r\n        }\r\n      );\r\n  }\r\n  _loadMap(position) {\r\n    //https://leafletjs.com/   API\r\n\r\n    const { latitude } = position.coords;\r\n    const { longitude } = position.coords;\r\n    console.log(`https://www.google.com/maps/@${latitude},${longitude}`);\r\n    const coords = [latitude, longitude];\r\n\r\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n    }).addTo(this.#map);\r\n\r\n    this.#map.on('click', this._showForm.bind(this));\r\n    //\r\n    this.#workouts.forEach(work => {\r\n      this.renderWorkoutMarker(work);\r\n    });\r\n  }\r\n\r\n  //workout form\r\n  _showForm(mapE) {\r\n    this.#mapEvent = mapE;\r\n    form.classList.remove('hidden');\r\n    inputDistance.focus();\r\n  }\r\n\r\n  _hideForm() {\r\n    //Clear input\r\n    inputCadence.value =\r\n      inputDistance.value =\r\n      inputDuration.value =\r\n      inputElevation.value =\r\n        '';\r\n    form.classList.add('hidden');\r\n  }\r\n\r\n  _toggleElevationField() {\r\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\r\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\r\n  }\r\n\r\n  _newWorkOut(e) {\r\n    const validInput = (...inputs) => inputs.every(inp => Number.isFinite(inp));\r\n    const positiveInput = (...inputs) => inputs.every(inp => inp > 0);\r\n    e.preventDefault();\r\n\r\n    //get data from form\r\n    const type = inputType.value;\r\n    const distance = +inputDistance.value;\r\n    const duration = +inputDuration.value;\r\n    const { lat, lng } = this.#mapEvent.latlng;\r\n    let workout;\r\n\r\n    //check data\r\n\r\n    //creat running\r\n    if (type == 'running') {\r\n      const cadence = +inputCadence.value;\r\n      if (\r\n        !validInput(distance, duration, cadence) ||\r\n        !positiveInput(distance, duration, cadence)\r\n      )\r\n        return alert('Inputs must be positive number');\r\n\r\n      workout = new Running([lat, lng], distance, duration, cadence);\r\n    }\r\n\r\n    //create cycling\r\n    if (type == 'cycling') {\r\n      const elevation = +inputElevation.value;\r\n      if (\r\n        !validInput(distance, duration, elevation) ||\r\n        !positiveInput(distance, duration)\r\n      )\r\n        return alert('Inputs must be number');\r\n      workout = new Cycling([lat, lng], distance, duration, elevation);\r\n    }\r\n\r\n    //add new object to workout array\r\n    this.#workouts.push(workout);\r\n    console.log(workout);\r\n\r\n    //render workout\r\n    this.renderWorkoutMarker(workout);\r\n    this._renderWorkout(workout);\r\n\r\n    //hide form after enter\r\n    this._hideForm();\r\n\r\n    //set local storage\r\n    this._setLocalStorage();\r\n  }\r\n\r\n  renderWorkoutMarker(workout) {\r\n    L.marker(workout.coords)\r\n      .addTo(this.#map)\r\n      .bindPopup(\r\n        L.popup({\r\n          maxWidth: 300,\r\n          minWidth: 100,\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n          className: `${workout.type}running-popup`,\r\n        })\r\n      )\r\n      .setPopupContent(\r\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\r\n      )\r\n      .openPopup();\r\n  }\r\n\r\n  _renderWorkout(workout) {\r\n    let workoutHtml = `\r\n        <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\r\n          <h2 class=\"workout__title\">${workout.description}</h2>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">${\r\n              workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\r\n            } </span>\r\n            <span class=\"workout__value\">${workout.distance}</span>\r\n            <span class=\"workout__unit\">km</span>\r\n          </div>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚è±</span>\r\n            <span class=\"workout__value\">${workout.duration}</span>\r\n            <span class=\"workout__unit\">min</span>\r\n          </div>\r\n          \r\n        `;\r\n\r\n    if (workout.type === 'running')\r\n      workoutHtml += `\r\n            <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n            <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\r\n            <span class=\"workout__unit\">min/km</span>\r\n          </div>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">ü¶∂üèº</span>\r\n            <span class=\"workout__value\">${workout.cadence}</span>\r\n            <span class=\"workout__unit\">spm</span>\r\n          </div>\r\n        </li>\r\n            `;\r\n\r\n    if (workout.type === 'cycling')\r\n      workoutHtml += `\r\n            <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚ö°Ô∏è</span>\r\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\r\n            <span class=\"workout__unit\">km/h</span>\r\n          </div>\r\n          <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">‚õ∞</span>\r\n            <span class=\"workout__value\">${workout.elevationGain}</span>\r\n            <span class=\"workout__unit\">m</span>\r\n          </div>\r\n        </li>\r\n            `;\r\n    form.insertAdjacentHTML('afterend', workoutHtml);\r\n  }\r\n\r\n  _moveToMaker(e) {\r\n    const workoutClass = e.target.closest('.workout');\r\n    console.log(workoutClass);\r\n    if (!workoutClass) return;\r\n    const workout = this.#workouts.find(\r\n      work => work.id === workoutClass.dataset.id\r\n    );\r\n    console.log(workout);\r\n\r\n    this.#map.setView(workout.coords, this.#mapZoomLevel);\r\n  }\r\n\r\n  _setLocalStorage() {\r\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\r\n  }\r\n\r\n  _getLocalStorage() {\r\n    const data = JSON.parse(localStorage.getItem('workouts'));\r\n    if (!data) return;\r\n    this.#workouts = data;\r\n    this.#workouts.forEach(work => {\r\n      this._renderWorkout(work);\r\n    });\r\n  }\r\n}\r\n\r\nconst app = new App();\r\n"],"names":["months","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","WorkOut","date","Date","id","now","slice","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getDate","getMonth","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","App","map","mapEvent","mapZoomLevel","workouts","_getPosition","_getLocalStorage","addEventListener","_newWorkOut","bind","_toggleElevationField","_moveToMaker","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","console","log","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","add","closest","toggle","e","validInput","inputs","every","inp","Number","isFinite","positiveInput","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","workoutHtml","toFixed"],"version":3,"file":"index.deec79c3.js.map"}